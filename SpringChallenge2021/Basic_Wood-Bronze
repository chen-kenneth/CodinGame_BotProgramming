import sys
import math


# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.
cell_priority = []
cell_priority_neighbours = []
second_cell_priority = []
number_of_cells = int(input())  # 37
for i in range(number_of_cells):
   # index: 0 is the center cell, the next cells spiral outwards
   # richness: 0 if the cell is unusable, 1-3 for usable cells
   # neigh_0: the index of the neighbouring cell for each direction
   index, richness, neigh_0, neigh_1, neigh_2, neigh_3, neigh_4, neigh_5 = [int(j) for j in input().split()]
   if richness == 3:
       cell_priority.append(index)


# game loop
while True:
   currently_waiting = False
   done_action = False
   potential_seed = []
   potential_complete = []
   potential_grow = []
   potential_actions = []
   already_completed = False


   size_0_trees = 0
   size_1_trees = 0
   size_2_trees = 0
   size_3_trees = 0


   s0_locations = []
   s1_locations = []
   s2_locations = []
   s3_locations = []


   day = int(input())  # the game lasts 24 days: 0-23
   nutrients = int(input())  # the base score you gain from the next COMPLETE action
   # sun: your sun points
   # score: your current score
   sun, score = [int(i) for i in input().split()]
   inputs = input().split()
   opp_sun = int(inputs[0])  # opponent's sun points
   opp_score = int(inputs[1])  # opponent's score
   opp_is_waiting = inputs[2] != "0"  # whether your opponent is asleep until the next day
   number_of_trees = int(input())  # the current amount of trees
   for i in range(number_of_trees):
       inputs = input().split()
       cell_index = int(inputs[0])  # location of this tree
       size = int(inputs[1])  # size of this tree: 0-3
       is_mine = inputs[2] != "0"  # 1 if this is your tree
       is_dormant = inputs[3] != "0"  # 1 if this tree is dormant
       if is_mine == 1:
           if size == 0:
               size_0_trees += 1
               s0_locations.append(cell_index)
           elif size == 1:
               size_1_trees += 1
               s1_locations.append(cell_index)
           elif size == 2:              
               size_2_trees += 1
               s2_locations.append(cell_index)
           elif size == 3:
               size_3_trees += 1
               s3_locations.append(cell_index)
   number_of_possible_actions = int(input())  # all legal actions
   for j in range(number_of_possible_actions):
       possible_action = input()  # try printing something from here to start with
       if 'SEED' in possible_action:
           potential_seed.append(possible_action)
       elif 'COMPLETE' in possible_action:
           potential_complete.append(possible_action)
       elif 'GROW' in possible_action:
           potential_grow.append(possible_action)
      
       if not 'WAIT' in possible_action:
           potential_actions.append(possible_action)






   # Write an action using print
   # To debug: print("Debug messages...", file=sys.stderr, flush=True)




   # GROW cellIdx | SEED sourceIdx targetIdx | COMPLETE cellIdx | WAIT <message>
   if len(potential_actions) > 0:
       finished = False
       priority_met = False
       if size_0_trees <= 3 and len(potential_seed) > 0:
           for i in potential_seed:
               if 'SEED' in i:
                   if str(cell_priority) in i:
                       print(i)
                       priority_met = True
                       finished = True
                       break


       if size_0_trees <= 3 and len(potential_seed) > 0 and priority_met == False:
           for i in potential_seed:
               if 'SEED' in i:
                   print(i)
                   finished = True
                   break
      
       if size_1_trees <= 3 and len(s1_locations) > 0:
           no_grow = False
           for i in potential_grow:
               if no_grow == True:
                   break
                   for j in s1_locations:
                       if str(j) in i:
                           print(i)
                           finished = True
                           no_grow = True
                           break
      
       if size_2_trees <= 3 and len(s2_locations) > 0:
           for i in potential_grow:
               for j in s2_locations:
                   if j in i:
                       print(i)
                       finished = True
                       break


       if size_3_trees <= 3 and len(s3_locations) > 0:
           for i in potential_grow:
               for j in s3_locations:
                   if j in i:
                       print(i)
                       finished = True
                       break


       if len(potential_complete) != 0:
           print(potential_complete[0])
           finished = True
      
       print('WAIT')
      
